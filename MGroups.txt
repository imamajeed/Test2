import boto3

def evaluate_compliance(event, context):
    ec2_client = boto3.client('ec2')
    ssm_client = boto3.client('ssm')
    
    # Extract instance details from the event
    instance_id = event['resourceId']
    
    try:
        # Check if instance is managed by SSM
        response = ssm_client.describe_instance_information(
            Filters=[{'Key': 'InstanceIds', 'Values': [instance_id]}]
        )
        if response['InstanceInformationList']:
            return {
                'compliance_type': 'COMPLIANT',
                'annotation': 'SSM Agent is running on the instance.'
            }
        else:
            return {
                'compliance_type': 'NON_COMPLIANT',
                'annotation': 'SSM Agent is not running on the instance.'
            }
    except Exception as e:
        return {
            'compliance_type': 'NON_COMPLIANT',
            'annotation': f'Error checking SSM Agent status: {str(e)}'
        }

def lambda_handler(event, context):
    evaluations = []
    for configuration_item in event['invokingEvent']['configurationItems']:
        instance_id = configuration_item['resourceId']
        evaluation_result = evaluate_compliance({'resourceId': instance_id}, context)
        evaluations.append({
            'ComplianceResourceType': 'AWS::EC2::Instance',
            'ComplianceResourceId': instance_id,
            'ComplianceType': evaluation_result['compliance_type'],
            'Annotation': evaluation_result['annotation'],
            'OrderingTimestamp': configuration_item['configurationItemCaptureTime']
        })
    
    # Return evaluations to AWS Config
    config_client = boto3.client('config')
    config_client.put_evaluations(
        Evaluations=evaluations,
        ResultToken=event['resultToken']
    )
